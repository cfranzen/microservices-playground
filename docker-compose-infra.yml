services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: microservices
      POSTGRES_PASSWORD: microservices
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5051:5432"
    networks:
      - app
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "pgadmin4@pgadmin.org"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app

  rabbitmq:
    image: rabbitmq:3.9.13-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=microservices
      - HTTP_PASSWORD=microservices
    ports:
      - "18081:8081"
    networks:
      - app
    depends_on:
      - redis

  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: microservices
      MONGO_INITDB_ROOT_PASSWORD: microservices
    volumes:
      - ./docker/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - app

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "18082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: microservices
      ME_CONFIG_MONGODB_ADMINPASSWORD: microservices
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    networks:
      - app
    depends_on:
      - mongo

  zookeeper:
    image: bitnami/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app

  kafka:
    image: bitnami/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka-data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
      - app
    depends_on:
      - kafka

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2"
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      http.host: "0.0.0.0"
      action.auto_create_index: "false"
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - "elasticsearch-data:/usr/share/elasticsearch/data"
    networks:
      - app
    restart: "on-failure"

  # Root login: User=admin, Password=microservices
  graylog:
    image: "graylog/graylog:4.2"
    container_name: graylog
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: "microservices-microservices"
      GRAYLOG_ROOT_PASSWORD_SHA2: "60a872f76d541bec6397b83112db9eaeea51695a444bd97cbf645bf3ce10dee0"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9821"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9821/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://graylog:graylog@mongo:27017/graylog"
    ports:
      - "9821:9821/tcp"   # Server API
      - "12201:12201/tcp" # GELF TCP
      - "12201:12201/udp" # GELF UDP
    volumes:
      - "graylog-data:/usr/share/graylog/data/data"
      - "graylog-journal:/usr/share/graylog/data/journal"
    restart: "on-failure"
    networks:
      - app
    depends_on:
      - elasticsearch
      - mongo

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    networks:
      - app
    restart: always
    depends_on:
      - eureka-server

  blackbox-exporter:
    image: prom/blackbox-exporter
    container_name: blackbox-exporter
    ports:
      - 9115:9115
    networks:
      - app

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./docker/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    networks:
      - app

  eureka-server:
    image: ghcr.io/cfranzen/microservices-playground/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
    depends_on:
      - zipkin

  apigw:
    image: ghcr.io/cfranzen/microservices-playground/apigw:latest
    container_name: apigw
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
    depends_on:
      - zipkin
      - eureka-server

networks:
  app:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  redis-data:
  zookeeper-data:
  kafka-data:
  elasticsearch-data:
  graylog-data:
  graylog-journal: